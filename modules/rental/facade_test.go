package rental

import (
	"app/modules/film"
	"testing"
	"time"

	"go.uber.org/fx"
	"go.uber.org/fx/fxtest"
)

// GENERATED BY AI

type mockFilmApi struct{}

func (m *mockFilmApi) CreateFilm(filmDTO film.FilmDTO) error { return nil }
func (m *mockFilmApi) GetAllFilms() ([]film.FilmDTO, error)  { return nil, nil }
func (m *mockFilmApi) GetFilmById(id int) (*film.FilmDTO, error) {
	var filmType film.FilmType

	switch id {
	case 1:
		filmType = film.Regular
	case 2:
		filmType = film.NewRelease
	case 3:
		filmType = film.Old
	default:
		filmType = film.Regular
	}

	return &film.FilmDTO{
		ID:    id,
		Title: "Test Film",
		Type:  filmType,
	}, nil
}

func newMockFilmApi() film.Api {
	return &mockFilmApi{}
}

func TestRentalApi(t *testing.T) {
	testApp := fxtest.New(
		t,
		fx.Provide(newMemoryRentalRepo),
		fx.Provide(newPriceCalculator),
		fx.Provide(newMockFilmApi),
		fx.Provide(newApi),
		fx.Invoke(func(api Api) {
			t.Run("Create and Retrieve Rental", func(t *testing.T) {
				err := api.CreateRental(CreateRentalDTO{
					FilmID: 1,
					Days:   3,
				})
				if err != nil {
					t.Fatalf("Failed to create rental: %v", err)
				}

				rental, err := api.GetRentalById(1)
				if err != nil {
					t.Fatalf("Failed to get rental: %v", err)
				}
				if rental == nil {
					t.Fatal("Expected rental to be found, got nil")
				}

				tests := []struct {
					name     string
					got      interface{}
					expected interface{}
				}{
					{"ID", rental.ID, 1},
					{"FilmID", rental.FilmID, 1},
					{"Returned", rental.Returned, false},
				}

				for _, tt := range tests {
					t.Run(tt.name, func(t *testing.T) {
						if tt.got != tt.expected {
							t.Errorf("Expected %v to be %v, got %v", tt.name, tt.expected, tt.got)
						}
					})
				}

				if rental.StartDate.After(time.Now()) {
					t.Error("Start date should not be in the future")
				}
				if rental.EndDate.Before(rental.StartDate) {
					t.Error("End date should not be before start date")
				}
			})

			t.Run("Get All Rentals", func(t *testing.T) {
				rentals, err := api.GetAllRentals()
				if err != nil {
					t.Fatalf("Failed to get all rentals: %v", err)
				}
				if len(rentals) != 1 {
					t.Errorf("Expected 1 rental, got %d", len(rentals))
				}
			})

			t.Run("Get Rentals By Film ID", func(t *testing.T) {
				rentals, err := api.GetRentalsByFilmId(1)
				if err != nil {
					t.Fatalf("Failed to get rentals by film ID: %v", err)
				}
				if len(rentals) != 1 {
					t.Errorf("Expected 1 rental for film ID 1, got %d", len(rentals))
				}
				if rentals[0].FilmID != 1 {
					t.Errorf("Expected film ID 1, got %d", rentals[0].FilmID)
				}
			})

			t.Run("Return Rental", func(t *testing.T) {
				err := api.ReturnRental(1)
				if err != nil {
					t.Fatalf("Failed to return rental: %v", err)
				}

				rental, err := api.GetRentalById(1)
				if err != nil {
					t.Fatalf("Failed to get rental after return: %v", err)
				}
				if !rental.Returned {
					t.Error("Expected rental to be returned")
				}
			})

			t.Run("Non-existent Rental", func(t *testing.T) {
				rental, err := api.GetRentalById(999)
				if err != nil {
					t.Errorf("Expected no error for non-existent rental, got %v", err)
				}
				if rental != nil {
					t.Error("Expected nil for non-existent rental, got rental")
				}
			})

			t.Run("Calculate Price for Different Film Types", func(t *testing.T) {
				tests := []struct {
					name     string
					filmId   int
					days     int
					expected float64
				}{
					{"New Release 1 day", 2, 1, 40.0},
					{"New Release 3 days", 2, 3, 120.0},
					{"Regular 2 days", 1, 2, 30.0},
					{"Regular 4 days", 1, 4, 60.0},
					{"Old Film 5 days", 3, 5, 30.0},
					{"Old Film 7 days", 3, 7, 90.0},
				}

				for _, tt := range tests {
					t.Run(tt.name, func(t *testing.T) {
						price, err := api.CalculatePrice(tt.filmId, tt.days)
						if err != nil {
							t.Fatalf("Unexpected error: %v", err)
						}
						if price != tt.expected {
							t.Errorf("Expected price %v, got %v", tt.expected, price)
						}
					})
				}
			})

			t.Run("Calculate Late Charges", func(t *testing.T) {
				tests := []struct {
					name      string
					filmId    int
					extraDays int
					expected  float64
				}{
					{"New Release 2 extra days", 2, 2, 80.0},
					{"Regular 1 extra day", 1, 1, 30.0},
				}

				for _, tt := range tests {
					t.Run(tt.name, func(t *testing.T) {
						charge, err := api.CalculateLateCharge(tt.filmId, tt.extraDays)
						if err != nil {
							t.Fatalf("Unexpected error: %v", err)
						}
						if charge != tt.expected {
							t.Errorf("Expected late charge %v, got %v", tt.expected, charge)
						}
					})
				}
			})
		}),
	)

	testApp.RequireStart()
	testApp.RequireStop()
}
