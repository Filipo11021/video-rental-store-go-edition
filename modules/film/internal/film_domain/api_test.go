package film_domain

import (
	"app/modules/film/film_contracts"
	"testing"

	"go.uber.org/fx"
	"go.uber.org/fx/fxtest"
)

// GENERATED BY AI
func TestFilmApi(t *testing.T) {
	testApp := fxtest.New(
		t,
		fx.Provide(NewMemoryFilmRepo),
		fx.Provide(NewApi),
		fx.Invoke(func(api film_contracts.Api) {
			t.Run("Create and Retrieve Single Film", func(t *testing.T) {
				err := api.CreateFilm(film_contracts.FilmDTO{Title: "Test Movie 1"})
				if err != nil {
					t.Fatalf("Failed to create film: %v", err)
				}

				film, err := api.GetFilmById(1)
				if err != nil {
					t.Fatalf("Failed to get film: %v", err)
				}
				if film == nil {
					t.Fatal("Expected film to be found, got nil")
				}

				tests := []struct {
					name     string
					got      interface{}
					expected interface{}
				}{
					{"ID", film.ID, 1},
					{"Title", film.Title, "Test Movie 1"},
				}

				for _, tt := range tests {
					t.Run(tt.name, func(t *testing.T) {
						if tt.got != tt.expected {
							t.Errorf("Expected %v to be %v, got %v", tt.name, tt.expected, tt.got)
						}
					})
				}
			})

			t.Run("Create Multiple Films", func(t *testing.T) {
				films := []film_contracts.FilmDTO{
					{Title: "Test Movie 2"},
					{Title: "Test Movie 3"},
				}

				for _, film := range films {
					err := api.CreateFilm(film)
					if err != nil {
						t.Fatalf("Failed to create film %s: %v", film.Title, err)
					}
				}

				allFilms, err := api.GetAllFilms()
				if err != nil {
					t.Fatalf("Failed to get all films: %v", err)
				}

				if len(allFilms) != 3 {
					t.Fatalf("Expected 3 films, got %d", len(allFilms))
				}

				foundIDs := make(map[int]bool)
				for _, film := range allFilms {
					foundIDs[film.ID] = true
				}

				for i := 1; i <= 3; i++ {
					if !foundIDs[i] {
						t.Errorf("Film with ID %d not found", i)
					}
				}
			})

			t.Run("Get All Films", func(t *testing.T) {
				films, err := api.GetAllFilms()
				if err != nil {
					t.Fatalf("Failed to get all films: %v", err)
				}
				if len(films) != 3 {
					t.Errorf("Expected 3 films, got %d", len(films))
				}
			})

			t.Run("Get Film By ID", func(t *testing.T) {
				tests := []struct {
					name          string
					id            int
					expectError   bool
					expectNil     bool
					expectedTitle string
				}{
					{
						name:          "Existing Film",
						id:            1,
						expectError:   false,
						expectNil:     false,
						expectedTitle: "Test Movie 1",
					},
					{
						name:        "Non-existing Film",
						id:          999,
						expectError: false,
						expectNil:   true,
					},
				}

				for _, tt := range tests {
					t.Run(tt.name, func(t *testing.T) {
						film, err := api.GetFilmById(tt.id)
						if tt.expectError && err == nil {
							t.Error("Expected error, got nil")
						}
						if !tt.expectError && err != nil {
							t.Errorf("Expected no error, got %v", err)
						}
						if tt.expectNil && film != nil {
							t.Error("Expected nil film, got film")
						}
						if !tt.expectNil && film == nil {
							t.Fatal("Expected film, got nil")
						}
						if film != nil && film.Title != tt.expectedTitle {
							t.Errorf("Expected title %s, got %s", tt.expectedTitle, film.Title)
						}
					})
				}
			})
		}),
	)

	testApp.RequireStart()
	testApp.RequireStop()
}
